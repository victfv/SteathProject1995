[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=12]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.beta4's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,cull_disabled,unshaded, vertex_lighting;
uniform vec4 outside : hint_color;
uniform vec4 inside : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float proximity_fade_distance;
uniform float distance_fade_min;
uniform float distance_fade_max;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	ROUGHNESS=roughness;
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = mix(inside.rgb, outside.rgb, float(FRONT_FACING)) * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	
	SPECULAR = specular;
	ALPHA = inside.a * albedo_tex.a;
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
	ALPHA*=clamp(smoothstep(distance_fade_min,distance_fade_max,-VERTEX.z),0.0,1.0);
}
"

[sub_resource type="Gradient" id=5]
offsets = PoolRealArray( 0, 0.434286, 0.868571, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=6]
gradient = SubResource( 5 )
width = 256

[resource]
shader = SubResource( 12 )
shader_param/outside = Color( 1, 0.678431, 0, 1 )
shader_param/inside = Color( 1, 0, 0, 0.0313726 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/proximity_fade_distance = 1.0
shader_param/distance_fade_min = 0.0
shader_param/distance_fade_max = 1.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = SubResource( 6 )
