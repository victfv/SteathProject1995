[gd_scene load_steps=15 format=2]

[ext_resource path="res://LevelBuilding/Traps/Camera/Camera.gd" type="Script" id=1]
[ext_resource path="res://SFX/Camera/camera_idle.wav" type="AudioStream" id=2]
[ext_resource path="res://Tools/Visibility/VisibityTest.tscn" type="PackedScene" id=3]
[ext_resource path="res://Tools/Visibility/DynamicCone.tscn" type="PackedScene" id=4]

[sub_resource type="CubeMesh" id=1]
size = Vector3( 0.2, 0.2, 0.4 )

[sub_resource type="SpatialMaterial" id=3]
albedo_color = Color( 0, 0, 0, 1 )
emission_enabled = true
emission = Color( 0.196078, 1, 0, 1 )
emission_energy = 1.0
emission_operator = 0
emission_on_uv2 = false

[sub_resource type="CubeMesh" id=2]
size = Vector3( 0.05, 0.05, 0.05 )

[sub_resource type="Shader" id=12]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.beta4's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,cull_disabled,unshaded, vertex_lighting;
uniform vec4 outside : hint_color;
uniform vec4 inside : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float proximity_fade_distance;
uniform float distance_fade_min;
uniform float distance_fade_max;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	ROUGHNESS=roughness;
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = mix(inside.rgb, outside.rgb, float(FRONT_FACING)) * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	
	SPECULAR = specular;
	ALPHA = inside.a * albedo_tex.a;
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
	ALPHA*=clamp(smoothstep(distance_fade_min,distance_fade_max,-VERTEX.z),0.0,1.0);
}
"

[sub_resource type="Gradient" id=5]
offsets = PoolRealArray( 0, 0.434286, 0.868571, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=6]
gradient = SubResource( 5 )
width = 256

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/outside = Color( 1, 0.678431, 0, 1 )
shader_param/inside = Color( 1, 0, 0, 0.0313726 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/proximity_fade_distance = 1.0
shader_param/distance_fade_min = 0.0
shader_param/distance_fade_max = 1.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = SubResource( 6 )

[sub_resource type="Shader" id=9]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.beta4's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded,vertex_lighting;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float proximity_fade_distance;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	ROUGHNESS=roughness;
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = albedo.a * albedo_tex.a;
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
}
"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/albedo = Color( 1, 0, 0, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/proximity_fade_distance = 0.45
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="SphereMesh" id=11]

[node name="Camera" type="Spatial"]
script = ExtResource( 1 )
fov = 40

[node name="CamY" type="Spatial" parent="."]

[node name="CameraMesh" type="MeshInstance" parent="CamY"]
transform = Transform( 1, 0, 0, 0, 0.866025, -0.5, 0, 0.5, 0.866025, 0, 0, 0 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = null

[node name="Light" type="MeshInstance" parent="CamY/CameraMesh"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0282458, 0.121057, 0.130989 )
material_override = SubResource( 3 )
mesh = SubResource( 2 )
material/0 = null

[node name="Vision" parent="CamY/CameraMesh" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 7.10543e-15, 0, 1, 0, 0, 0, 1, 0, -7.45058e-09, 0.208353 )
visionConeHalfAngle = 40
visibilityThreshold = 0.19

[node name="DynamicCone" parent="CamY/CameraMesh" instance=ExtResource( 4 )]
fov = 40
mat = SubResource( 13 )

[node name="LookDummy" type="Spatial" parent="."]

[node name="Timers" type="Node" parent="."]

[node name="TrackTimer" type="Timer" parent="Timers"]
one_shot = true

[node name="Label" type="Label" parent="."]
visible = false
margin_right = 40.0
margin_bottom = 14.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="range" type="MeshInstance" parent="."]
transform = Transform( 20, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0 )
material_override = SubResource( 10 )
mesh = SubResource( 11 )
material/0 = null

[node name="CamSounds" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource( 2 )
unit_size = 3.0
max_db = -6.0
autoplay = true
max_distance = 20.0
bus = "Entities"

[connection signal="seesPlayer" from="CamY/CameraMesh/Vision" to="." method="_on_Vision_seesPlayer"]
[connection signal="timeout" from="Timers/TrackTimer" to="." method="_on_TrackTimer_timeout"]
